import{log as e,error as t}from"../console.js";const r=e=>WebAssembly.compile("undefined"!=typeof Buffer?Buffer.from(e,"base64"):Uint8Array.from(atob(e),(e=>e.charCodeAt(0))));class ComponentError extends Error{constructor(e){const t="string"!=typeof e;super(t?e+""+" (see error.payload)":e),Object.defineProperty(this,"payload",{value:e,enumerable:t})}}let n=new DataView(new ArrayBuffer);const o=e=>n.buffer===e.buffer?n:n=new DataView(e.buffer),i="undefined"!=typeof process&&process.versions&&process.versions.node;let a;const s=WebAssembly.instantiate;function c(){throw new TypeError("invalid variant discriminant for bool")}const A=new TextDecoder,f=new TextEncoder;let l,d,b,p,g,w,u=0;function m(e,t,r){if("string"!=typeof e)throw new TypeError("expected a string");if(0===e.length)return u=0,1;let n=0,o=0,i=0;for(;e.length>0;){o=t(o,n,1,n+e.length),n+=e.length;const{read:a,written:s}=f.encodeInto(e,new Uint8Array(r.buffer,o+i,n-i));i+=s,e=e.slice(a)}return n>i&&(o=t(o,n,1,i)),u=i,o}function y(t,r){const n=t,o=r,i=A.decode(new Uint8Array(b.buffer,n,o));e(i)}function I(e,r){const n=e,o=r,i=A.decode(new Uint8Array(b.buffer,n,o));t(i)}const h={spliceBindings(e,t,r,n){const i=e;let a,s,f;if(null==i)a=0,s=0,f=0;else{a=1,s=m(i,g,b),f=u}const l=t,p=l.byteLength,y=g(0,0,1,1*p),I=new Uint8Array(l.buffer||l,l.byteOffset,1*p);new Uint8Array(b.buffer,y,1*p).set(I);const h=m(r,g,b),B=u,U=n;let v,E,k;if(null==U)v=0,E=0,k=0;else{v=1,E=m(U,g,b),k=u}const C=d["exports#splice-bindings"](a,s,f,y,p,h,B,v,E,k);let x;switch(o(b).getUint8(C+0,!0)){case 0:{const e=o(b).getInt32(C+4,!0),t=o(b).getInt32(C+8,!0),r=new Uint8Array(b.buffer.slice(e,e+1*t)),n=o(b).getInt32(C+12,!0),i=o(b).getInt32(C+16,!0),a=A.decode(new Uint8Array(b.buffer,n,i)),s=o(b).getInt32(C+24,!0),f=o(b).getInt32(C+20,!0),l=[];for(let e=0;e<s;e++){const t=f+40*e;let r;switch(o(b).getUint8(t+0,!0)){case 0:r=null;break;case 1:{const e=o(b).getInt32(t+4,!0),n=o(b).getInt32(t+8,!0);r=A.decode(new Uint8Array(b.buffer,e,n));break}default:throw new TypeError("invalid variant discriminant for option")}const n=o(b).getInt32(t+12,!0),i=o(b).getInt32(t+16,!0),a=A.decode(new Uint8Array(b.buffer,n,i)),s=o(b).getInt32(t+24,!0),d=o(b).getInt32(t+20,!0),p=[];for(let e=0;e<s;e++){const t=d+1*e;let r;switch(o(b).getUint8(t+0,!0)){case 0:r="i32";break;case 1:r="i64";break;case 2:r="f32";break;case 3:r="f64";break;default:throw new TypeError("invalid discriminant specified for CoreTy")}p.push(r)}let g;switch(o(b).getUint8(t+28,!0)){case 0:g=null;break;case 1:{let e;switch(o(b).getUint8(t+29,!0)){case 0:e="i32";break;case 1:e="i64";break;case 2:e="f32";break;case 3:e="f64";break;default:throw new TypeError("invalid discriminant specified for CoreTy")}g=e;break}default:throw new TypeError("invalid variant discriminant for option")}const w=o(b).getUint8(t+30,!0),u=o(b).getUint8(t+36,!0);l.push([r,a,{params:p,ret:g,retptr:0!=w&&(1==w||c()),retsize:o(b).getInt32(t+32,!0)>>>0,paramptr:0!=u&&(1==u||c())}])}const d=o(b).getInt32(C+32,!0),p=o(b).getInt32(C+28,!0),g=[];for(let e=0;e<d;e++){const t=p+16*e,r=o(b).getInt32(t+0,!0),n=o(b).getInt32(t+4,!0),i=A.decode(new Uint8Array(b.buffer,r,n)),a=o(b).getInt32(t+8,!0),s=o(b).getInt32(t+12,!0),c=A.decode(new Uint8Array(b.buffer,a,s));g.push([i,c])}const w=o(b).getInt32(C+40,!0),u=o(b).getInt32(C+36,!0),m=[];for(let e=0;e<w;e++){const t=u+16*e,r=o(b).getInt32(t+0,!0),n=o(b).getInt32(t+4,!0),i=A.decode(new Uint8Array(b.buffer,r,n)),a=o(b).getInt32(t+12,!0),s=o(b).getInt32(t+8,!0),c=[];for(let e=0;e<a;e++){const t=s+8*e,r=o(b).getInt32(t+0,!0),n=o(b).getInt32(t+4,!0),i=A.decode(new Uint8Array(b.buffer,r,n));c.push(i)}m.push([i,c])}x={tag:"ok",val:{wasm:r,jsBindings:a,exports:l,importWrappers:g,imports:m}};break}case 1:{const e=o(b).getInt32(C+4,!0),t=o(b).getInt32(C+8,!0);x={tag:"err",val:A.decode(new Uint8Array(b.buffer,e,t))};break}default:throw new TypeError("invalid variant discriminant for expected")}if(w(C),"err"===x.tag)throw new ComponentError(x.val);return x.val}};export{h as exports};const B=(async()=>{const e=async function(e){return i?(a=a||await import("fs/promises"),WebAssembly.compile(await a.readFile(e))):fetch(e).then(WebAssembly.compileStreaming)}(new URL("./spidermonkey-embedding-splicer.core.wasm",import.meta.url)),t=r("AGFzbQEAAAABBgFgAn9/AAMDAgAABAUBcAECAgcUAwEwAAABMQABCCRpbXBvcnRzAQAKGQILACAAIAFBABEAAAsLACAAIAFBAREAAAsALQlwcm9kdWNlcnMBDHByb2Nlc3NlZC1ieQENd2l0LWNvbXBvbmVudAUwLjguMgBLBG5hbWUAExJ3aXQtY29tcG9uZW50OnNoaW0BLwIAFGluZGlyZWN0LWNvbnNvbGUtbG9nARZpbmRpcmVjdC1jb25zb2xlLWVycm9y"),n=r("AGFzbQEAAAABBgFgAn9/AAIaAwABMAAAAAExAAAACCRpbXBvcnRzAXABAgIJCAEAQQALAgABAC0JcHJvZHVjZXJzAQxwcm9jZXNzZWQtYnkBDXdpdC1jb21wb25lbnQFMC44LjIAHARuYW1lABUUd2l0LWNvbXBvbmVudDpmaXh1cHM");Promise.all([e,t,n]).catch((()=>{})),({exports:l}=await s(await t)),({exports:d}=await s(await e,{console:{error:l[1],log:l[0]}})),b=d.memory,({exports:p}=await s(await n,{"":{$imports:l.$imports,0:y,1:I}})),g=d.cabi_realloc,w=d["cabi_post_exports#splice-bindings"]})();await B;