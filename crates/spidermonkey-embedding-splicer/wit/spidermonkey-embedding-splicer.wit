package local:spidermonkey-embedding-splicer;

interface splicer {
  enum core-ty {
    i32,
    i64,
    %f32,
    %f64
  }

  enum features {
    stdio,
    clocks,
    random,
    http,
  }

  record core-fn {
    params: list<core-ty>,
    ret: option<core-ty>,
    retptr: bool,
    retsize: u32,
    paramptr: bool,
  }

  record splice-result {
    wasm: list<u8>,
    js-bindings: string,
    exports: list<tuple<string, core-fn>>,
    imports: list<tuple<string, string, u32>>,
  }

  /// Stub the WASI imports/exports of a given JS engine WebAssembly module
  ///
  /// Depending on which features have been enabled, different default-provided WASI
  /// imports may be stubbed (for example to be made unreachable).
  stub-wasi: func(
      engine: list<u8>,
      features: list<features>,
      wit-world: option<string>,
      wit-path: option<string>,
      world-name: option<string>
  ) -> result<list<u8>, string>;

  /// Splice blindings for a given WIT world into the spider monkey engine binary (spidermonkey.wasm)
  /// this function produces a new WebAssembly component
  splice-bindings: func(
      spidermonkey-engine: list<u8>,
      features: list<features>,
      wit-world: option<string>,
      wit-path: option<string>,
      world-name: option<string>,
      debug: bool,
  ) -> result<splice-result, string>;

}

world spidermonkey-embedding-splicer {
  export splicer;
}
