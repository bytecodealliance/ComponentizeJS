name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
defaults:
  run:
    shell: bash

# Cancel any in-flight jobs for the same PR/branch so there's only one active
# at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Rust
      run: rustup update stable --no-self-update && rustup default stable

    - name: Install wasm32-unknown-unknown target
      run: rustup target add wasm32-unknown-unknown

    - name: Install wasm32-wasi target
      run: rustup target add wasm32-wasi

    # - run: |
    #     curl https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-linux.tar.gz -L | tar xzvf -
    #     echo "WASI_SDK_PATH=`pwd`/wasi-sdk-16.0" >> $GITHUB_ENV
    #   if : matrix.os == 'ubuntu-latest'
    # - run: |
    #     curl https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-macos.tar.gz -L | tar xzvf -
    #     echo "WASI_SDK_PATH=`pwd`/wasi-sdk-16.0" >> $GITHUB_ENV
    #   if : matrix.os == 'macos-latest'
    # - run: |
    #     curl https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-mingw.tar.gz -L | tar xzvf -
    #     echo "WASI_SDK_PATH=`pwd`/wasi-sdk-16.0" >> $GITHUB_ENV
    #   if : matrix.os == 'windows-latest'

    - name: "Install Binaryen (linux)"
      run: |
        set -x
        export BINARYEN_VERSION=105
        curl -sS -L "https://github.com/WebAssembly/binaryen/releases/download/version_${BINARYEN_VERSION}/binaryen-version_${BINARYEN_VERSION}-x86_64-linux.tar.gz" | tar xzf - &&
        echo "$PWD/binaryen-version_${BINARYEN_VERSION}/bin" >> $GITHUB_PATH

    - name: "Install wasi-sdk-20 (linux)"
      run: |
        set -x
        curl -sS -L -O https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-20/wasi-sdk-20.0-linux.tar.gz
        tar xf wasi-sdk-20.0-linux.tar.gz
        sudo mkdir -p /opt/wasi-sdk
        sudo mv wasi-sdk-20.0/* /opt/wasi-sdk/

    - uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Restore wasm-tools
      id: wasm-tools-restore
      uses: actions/cache/restore@v3
      with:
        path: /home/runner/.cargo/bin/wasm-tools
        key: crate-cache-wasm-tools

    - name: Install wasm-tools
      run: cargo install wasm-tools
      if: steps.wasm-tools-restore.outputs.cache-hit != 'true'

    - name: Cache wasm-tools
      uses: actions/cache/save@v3
      with:
        path: /home/runner/.cargo/bin/wasm-tools
        key: crate-cache-wasm-tools
      if: steps.wasm-tools-restore.outputs.cache-hit != 'true'

    - name: Restore Spidermonkey
      uses: actions/cache/restore@v3
      id: sm-restore
      with:
        path: deps/js-compute-runtime/runtime/spidermonkey
        key: cache-${{ hashFiles(
            'deps/js-compute-runtime/runtime/spidermonkey/build-engine.sh',
            'deps/js-compute-runtime/runtime/spidermonkey/gecko-revision',
            'deps/js-compute-runtime/runtime/spidermonkey/object-files.list',
            'deps/js-compute-runtime/runtime/rust-toolchain.toml'
          ) }}

    - name: Restore Rust build cache
      uses: actions/cache/restore@v3
      id: rust-build-restore
      with:
        path: target
        key: engine-build-${{ hashFiles('Cargo.lock', 'crates/spidermonkey-embedding-splicer/src/**/*.rs') }}

    - name: Install NPM packages
      run: npm install

    - name: Build
      run: npm run build

    - name: Cache Spidermonkey
      uses: actions/cache/save@v3
      with:
        path: deps/js-compute-runtime/runtime/spidermonkey
        key: cache-${{ hashFiles(
            'deps/js-compute-runtime/runtime/spidermonkey/build-engine.sh',
            'deps/js-compute-runtime/runtime/spidermonkey/gecko-revision',
            'deps/js-compute-runtime/runtime/spidermonkey/object-files.list',
            'deps/js-compute-runtime/runtime/rust-toolchain.toml'
          ) }}
      if: steps.sm-restore.outputs.cache-hit != 'true'

    - name: Cache Rust dependencies
      uses: actions/cache/save@v3
      with:
        path: target
        key: engine-build-${{ hashFiles('Cargo.lock', 'crates/spidermonkey-embedding-splicer/src/**/*.rs') }}
      if: steps.rust-build-restore.outputs.cache-hit != 'true'

    - name: Test
      run: npm run test

    - name: Restore Example build
      uses: actions/cache/restore@v3
      id: example-restore
      with:
        path: example/target
        key: engine-cargo-${{ hashFiles('example/src/main.rs', 'example/Cargo.lock', 'example/hello.wit') }}

    - name: Test Example
      run: cd example && npm run build && ./test.sh

    - name: Cache Example build
      uses: actions/cache/save@v3
      with:
        path: example/target
        key: engine-cargo-${{ hashFiles('example/src/main.rs', 'example/Cargo.lock', 'example/hello.wit') }}
      if: steps.example-restore.outputs.cache-hit != 'true'

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - name: Format source code
      run: cargo fmt -- --check
